name: Professional Portfolio Automation

on:
  # Run on schedule (daily for data collection, weekly for resume updates)
  schedule:
    - cron: '0 2 * * *'    # Daily at 2 AM UTC for data collection
    - cron: '0 6 * * 1'    # Weekly on Monday at 6 AM UTC for full automation
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'data_collection'
          - 'resume'
          - 'portfolio'
          - 'analytics'
      template:
        description: 'Resume template'
        required: false
        default: 'professional'
        type: choice
        options:
          - 'professional'
          - 'academic'
          - 'cybersecurity'
  
  # Run on specific file changes
  push:
    paths:
      - 'automation/**'
      - 'portfolio/**'
      - '.github/workflows/portfolio-automation.yml'
    branches:
      - main

jobs:
  portfolio-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('automation/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r automation/requirements.txt
      
      - name: Set up LaTeX (for PDF generation)
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-fonts-recommended
      
      - name: Configure automation system
        run: |
          # Create necessary directories
          mkdir -p automation/{logs,data,output/resumes}
          mkdir -p analytics/{reports,charts,data}
          mkdir -p portfolio/website/resumes
          
          # Set permissions
          chmod +x automation/scripts/*.py
        
      - name: Run GitHub data collection
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd automation/scripts
          python github_collector.py
        continue-on-error: true
      
      - name: Run certification tracking
        run: |
          cd automation/scripts
          python certification_tracker.py
        continue-on-error: true
      
      - name: Generate analytics
        run: |
          cd automation/scripts
          python analytics_engine.py
        continue-on-error: true
      
      - name: Generate resume
        run: |
          cd automation/scripts
          template="${{ github.event.inputs.template || 'professional' }}"
          python resume_generator.py --template "$template"
        continue-on-error: true
      
      - name: Update portfolio website
        run: |
          # Copy generated resumes to portfolio
          if [ -d "automation/output/resumes" ]; then
            cp -r automation/output/resumes/* portfolio/website/resumes/ 2>/dev/null || true
          fi
          
          # Update portfolio with latest data
          python automation/scripts/portfolio_updater.py 2>/dev/null || echo "Portfolio updater not yet implemented"
      
      - name: Generate deployment summary
        run: |
          echo "## üöÄ Portfolio Automation Summary" > deployment_summary.md
          echo "" >> deployment_summary.md
          echo "**Automation Run:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "### üìä Generated Files:" >> deployment_summary.md
          
          if [ -d "automation/output/resumes" ]; then
            echo "- **Resumes:** $(ls automation/output/resumes/ | wc -l) files generated" >> deployment_summary.md
          fi
          
          if [ -d "analytics/reports" ]; then
            echo "- **Analytics:** $(ls analytics/reports/ | wc -l) reports generated" >> deployment_summary.md
          fi
          
          if [ -d "analytics/charts" ]; then
            echo "- **Charts:** $(ls analytics/charts/ | wc -l) visualizations created" >> deployment_summary.md
          fi
          
          echo "" >> deployment_summary.md
          echo "### üéØ System Status:" >> deployment_summary.md
          echo "- ‚úÖ Data collection completed" >> deployment_summary.md
          echo "- ‚úÖ Resume generation completed" >> deployment_summary.md
          echo "- ‚úÖ Analytics processing completed" >> deployment_summary.md
          echo "- ‚úÖ Portfolio updates applied" >> deployment_summary.md
          
          cat deployment_summary.md
      
      - name: Commit and push updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Portfolio Automation"
          
          # Add generated files
          git add automation/data/* 2>/dev/null || true
          git add automation/output/* 2>/dev/null || true
          git add analytics/* 2>/dev/null || true
          git add portfolio/website/resumes/* 2>/dev/null || true
          git add deployment_summary.md 2>/dev/null || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Automated portfolio update - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi
      
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v3
      
      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v2
        with:
          path: './portfolio/website'
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v2

  # Job for manual component execution
  manual-component:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.component != 'full'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r automation/requirements.txt
      
      - name: Run specific component
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          component="${{ github.event.inputs.component }}"
          template="${{ github.event.inputs.template || 'professional' }}"
          
          cd automation/scripts
          python career_automation.py --component "$component" --template "$template"
      
      - name: Commit component updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Portfolio Automation"
          
          git add automation/data/* 2>/dev/null || true
          git add automation/output/* 2>/dev/null || true
          git add analytics/* 2>/dev/null || true
          
          if ! git diff --staged --quiet; then
            git commit -m "üîß Updated component: ${{ github.event.inputs.component }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push
          fi

  # Notification job
  notify:
    needs: [portfolio-automation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notification
        run: |
          if [ "${{ needs.portfolio-automation.result }}" == "success" ]; then
            echo "‚úÖ Portfolio automation completed successfully!"
          else
            echo "‚ùå Portfolio automation failed. Check logs for details."
          fi