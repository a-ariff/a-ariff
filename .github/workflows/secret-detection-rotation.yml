name: 🔑 Secret Detection & Rotation
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run secret detection every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_rotation:
        description: 'Force secret rotation'
        required: false
        default: 'false'
        type: boolean
permissions:
  contents: read
  security-events: write
  actions: write
  issues: write
jobs:
  trufflehog-scan:
    name: 🐷 TruffleHog Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true  # Non-blocking while we triage external scanner issues
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Run TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --github-actions
  gitleaks-scan:
    name: 🔍 GitLeaks Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Run GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
  secretlint-scan:
    name: 🔐 Secretlint Pattern Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Non-blocking while we triage external scanner issues
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 📦 Install Secretlint
      run: |
        npm install -g @secretlint/cli @secretlint/secretlint-rule-preset-recommend
    
    - name: 🔍 Run Secretlint Scan
      run: |
        secretlint "**/*" --format json --output secretlint-report.json || true
        secretlint "**/*"
    
    - name: 📊 Upload Secretlint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secretlint-report
        path: secretlint-report.json
        retention-days: 30
  detect-secrets-scan:
    name: 🕵️ IBM Detect Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: 📦 Install detect-secrets
      run: |
        pip install detect-secrets
    
    - name: 🔍 Run detect-secrets scan
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline || true
        detect-secrets audit .secrets.baseline || true
    
    - name: 📊 Upload detect-secrets baseline
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-baseline
        path: .secrets.baseline
        retention-days: 30
  azure-key-vault-rotation:
    name: 🔄 Azure Key Vault Secret Rotation
    runs-on: ubuntu-latest
    if: github.event.inputs.force_rotation == 'true' || github.event_name == 'schedule'
    timeout-minutes: 20
    environment: production
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🔄 Rotate API Keys
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Azure Key Vault secret rotation script
          $keyVaultName = "${{ secrets.AZURE_KEY_VAULT_NAME }}"
          $secrets = @('api-key-1', 'database-password', 'service-principal-secret')
          
          foreach ($secretName in $secrets) {
            try {
              Write-Host "🔄 Rotating secret: $secretName"
              
              # Get current secret
              $currentSecret = Get-AzKeyVaultSecret -VaultName $keyVaultName -Name $secretName
              
              # Generate new secret (example for API key)
              if ($secretName -like "*api-key*") {
                $newSecret = [System.Web.Security.Membership]::GeneratePassword(32, 5)
              } else {
                $newSecret = [System.Web.Security.Membership]::GeneratePassword(24, 3)
              }
              
              # Update secret in Key Vault
              Set-AzKeyVaultSecret -VaultName $keyVaultName -Name $secretName -SecretValue (ConvertTo-SecureString $newSecret -AsPlainText -Force)
              
              Write-Host "✅ Successfully rotated: $secretName"
            }
            catch {
              Write-Error "❌ Failed to rotate secret: $secretName - $($_.Exception.Message)"
            }
          }
  github-secrets-audit:
    name: 🔍 GitHub Secrets Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🔍 Audit GitHub Secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔍 Auditing GitHub repository secrets..."
        
        # List of required secrets for security framework
        required_secrets=(
          "AZURE_CREDENTIALS"
          "AZURE_KEY_VAULT_NAME"
          "SEMGREP_APP_TOKEN"
          "GITLEAKS_LICENSE"
          "SNYK_TOKEN"
          "DEFENDER_API_KEY"
          "SENTINEL_WORKSPACE_ID"
        )
        
        echo "📋 Required secrets checklist:" > secrets-audit.md
        for secret in "${required_secrets[@]}"; do
          echo "- [ ] $secret" >> secrets-audit.md
        done
        
        echo "⚠️ Please ensure all required secrets are configured in repository settings"
    
    - name: 📊 Upload Secrets Audit
      uses: actions/upload-artifact@v4
      with:
        name: secrets-audit-report
        path: secrets-audit.md
        retention-days: 30
  secret-rotation-notification:
    name: 📢 Secret Rotation Notifications
    runs-on: ubuntu-latest
    needs: [azure-key-vault-rotation]
    if: always() && needs.azure-key-vault-rotation.result != 'skipped'
    
    steps:
    - name: 📧 Teams Notification
      if: needs.azure-key-vault-rotation.result == 'success'
      run: |
        curl -H "Content-Type: application/json" -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "Secret Rotation Completed",
          "themeColor": "00FF00",
          "sections": [{
            "activityTitle": "🔄 Secret Rotation Completed",
            "activitySubtitle": "Repository: ${{ github.repository }}",
            "facts": [{
              "name": "Status:",
              "value": "✅ Success"
            }, {
              "name": "Timestamp:",
              "value": "'$(date)'"
            }]
          }]
        }' ${{ secrets.TEAMS_WEBHOOK_URL }} || echo "Teams webhook not configured"
    
    - name: 🚨 Alert on Failure
      if: needs.azure-key-vault-rotation.result == 'failure'
      run: |
        curl -H "Content-Type: application/json" -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "Secret Rotation Failed",
          "themeColor": "FF0000",
          "sections": [{
            "activityTitle": "❌ Secret Rotation Failed",
            "activitySubtitle": "Repository: ${{ github.repository }}",
            "facts": [{
              "name": "Status:",
              "value": "❌ Failed"
            }, {
              "name": "Action Required:",
              "value": "Manual intervention needed"
            }]
          }]
        }' ${{ secrets.TEAMS_WEBHOOK_URL }} || echo "Teams webhook not configured"
  security-summary:
    name: 📊 Secret Detection Summary
    runs-on: ubuntu-latest
    needs: [trufflehog-scan, gitleaks-scan, secretlint-scan, detect-secrets-scan, github-secrets-audit]
    if: always()
    
    steps:
    - name: 📊 Generate Secret Detection Summary
      run: |
        echo "# 🔑 Secret Detection & Rotation Summary" > secret-summary.md
        echo "**Scan Date:** $(date)" >> secret-summary.md
        echo "**Repository:** ${{ github.repository }}" >> secret-summary.md
        echo "" >> secret-summary.md
        
        echo "## 🔍 Detection Results" >> secret-summary.md
        echo "- ✅ TruffleHog Scan: ${{ needs.trufflehog-scan.result }}" >> secret-summary.md
        echo "- ✅ GitLeaks Scan: ${{ needs.gitleaks-scan.result }}" >> secret-summary.md
        echo "- ✅ Secretlint Scan: ${{ needs.secretlint-scan.result }}" >> secret-summary.md
        echo "- ✅ IBM Detect-Secrets: ${{ needs.detect-secrets-scan.result }}" >> secret-summary.md
        echo "- ✅ GitHub Secrets Audit: ${{ needs.github-secrets-audit.result }}" >> secret-summary.md
        echo "" >> secret-summary.md
        
        if [[ "${{ github.event.inputs.force_rotation }}" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
          echo "## 🔄 Rotation Status" >> secret-summary.md
          echo "- Secret rotation was triggered" >> secret-summary.md
        fi
        
        echo "📊 **View detailed results in Security tab**" >> secret-summary.md
    
    - name: 📤 Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: secret-detection-summary
        path: secret-summary.md
        retention-days: 30
