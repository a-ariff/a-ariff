name: Vulnerability Management and Patching

on:
  schedule:
    # Weekly vulnerability scan and patching
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      patch_level:
        description: 'Patching level'
        required: true
        default: 'critical'
        type: choice
        options:
        - critical
        - high
        - medium
        - all
      auto_deploy:
        description: 'Auto-deploy patched images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME_PREFIX: a-ariff

permissions:
  contents: write
  packages: write
  security-events: write
  pull-requests: write

jobs:
  # Scan all images for vulnerabilities
  vulnerability-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ["powershell-tools", "security-lab", "dev-environment"]
    outputs:
      has-vulnerabilities: ${{ steps.check-vulns.outputs.has-vulnerabilities }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest

      - name: Run comprehensive vulnerability scan
        run: |
          # Create results directory
          mkdir -p scan-results/${{ matrix.image }}
          
          # Trivy scan
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/scan-results/${{ matrix.image }}:/output \
            aquasecurity/trivy:latest image \
            --format json \
            --output /output/trivy-scan.json \
            --severity CRITICAL,HIGH,MEDIUM \
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype scan
        run: |
          grype ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest \
            -o json > scan-results/${{ matrix.image }}/grype-scan.json

      - name: Generate SBOM
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest \
            -o spdx-json > scan-results/${{ matrix.image }}/sbom.spdx.json

      - name: Analyze vulnerability results
        id: check-vulns
        run: |
          # Analyze Trivy results
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' scan-results/${{ matrix.image }}/trivy-scan.json || echo "0")
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' scan-results/${{ matrix.image }}/trivy-scan.json || echo "0")
          MEDIUM_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' scan-results/${{ matrix.image }}/trivy-scan.json || echo "0")
          
          echo "Image: ${{ matrix.image }}"
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Medium vulnerabilities: $MEDIUM_COUNT"
          
          # Set output based on patch level
          PATCH_LEVEL="${{ inputs.patch_level || 'critical' }}"
          HAS_VULNS="false"
          
          case "$PATCH_LEVEL" in
            "critical")
              if [ "$CRITICAL_COUNT" -gt 0 ]; then HAS_VULNS="true"; fi
              ;;
            "high")
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then HAS_VULNS="true"; fi
              ;;
            "medium")
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ] || [ "$MEDIUM_COUNT" -gt 0 ]; then HAS_VULNS="true"; fi
              ;;
            "all")
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ] || [ "$MEDIUM_COUNT" -gt 0 ]; then HAS_VULNS="true"; fi
              ;;
          esac
          
          echo "has-vulnerabilities=$HAS_VULNS" >> $GITHUB_OUTPUT
          
          # Create summary report
          cat > scan-results/${{ matrix.image }}/summary.json << EOF
          {
            "image": "${{ matrix.image }}",
            "scan_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "vulnerabilities": {
              "critical": $CRITICAL_COUNT,
              "high": $HIGH_COUNT,
              "medium": $MEDIUM_COUNT
            },
            "patch_required": $HAS_VULNS,
            "patch_level": "$PATCH_LEVEL"
          }
          EOF

      - name: Upload vulnerability scan results
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-${{ matrix.image }}
          path: scan-results/${{ matrix.image }}/

      - name: Upload to GitHub Security tab
        if: always()
        run: |
          # Convert Trivy JSON to SARIF
          docker run --rm -v $(pwd)/scan-results/${{ matrix.image }}:/data \
            aquasecurity/trivy:latest convert \
            --format sarif \
            --output /data/trivy.sarif \
            /data/trivy-scan.json

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: scan-results/${{ matrix.image }}/trivy.sarif
          category: vulnerability-scan-${{ matrix.image }}

  # Automated patching for vulnerable images
  automated-patching:
    needs: vulnerability-scan
    if: needs.vulnerability-scan.outputs.has-vulnerabilities == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ["powershell-tools", "security-lab", "dev-environment"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download vulnerability scan results
        uses: actions/download-artifact@v4
        with:
          name: vulnerability-scan-${{ matrix.image }}
          path: scan-results/${{ matrix.image }}/

      - name: Check if patching is needed
        id: check-patch
        run: |
          if [ -f "scan-results/${{ matrix.image }}/summary.json" ]; then
            PATCH_REQUIRED=$(jq -r '.patch_required' scan-results/${{ matrix.image }}/summary.json)
            echo "patch-required=$PATCH_REQUIRED" >> $GITHUB_OUTPUT
          else
            echo "patch-required=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate patched Dockerfile
        if: steps.check-patch.outputs.patch-required == 'true'
        run: |
          # Install PowerShell for automated patching script
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb || sudo apt-get install -f -y
          rm powershell_7.4.0-1.deb_amd64.deb
          
          # Pull the current image
          docker pull ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest
          
          # Run automated patching script
          pwsh -File docker-automation/scripts/automated-patching.ps1 \
            -ImageName "${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest" \
            -MinSeverity "${{ inputs.patch_level || 'CRITICAL' }}" \
            -AutoApprove

      - name: Build and test patched image
        if: steps.check-patch.outputs.patch-required == 'true'
        run: |
          PATCH_TAG="$(date +%Y%m%d-%H%M%S)-patched"
          
          # Check if patched image was created
          PATCHED_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "patched" | head -n1)
          
          if [ -n "$PATCHED_IMAGE" ]; then
            echo "Testing patched image: $PATCHED_IMAGE"
            
            # Tag for registry
            docker tag $PATCHED_IMAGE ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:$PATCH_TAG
            
            # Run basic smoke test
            case "${{ matrix.image }}" in
              "powershell-tools")
                docker run --rm $PATCHED_IMAGE pwsh -Command "Write-Host 'PowerShell patched image test passed'"
                ;;
              "security-lab")
                docker run --rm $PATCHED_IMAGE bash -c "echo 'Security lab patched image test passed'"
                ;;
              "dev-environment")
                docker run --rm $PATCHED_IMAGE bash -c "echo 'Dev environment patched image test passed'"
                ;;
            esac
            
            echo "PATCHED_TAG=$PATCH_TAG" >> $GITHUB_ENV
            echo "PATCHED_IMAGE_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "No patched image was created"
            echo "PATCHED_IMAGE_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Verify patch effectiveness
        if: env.PATCHED_IMAGE_AVAILABLE == 'true'
        run: |
          # Scan patched image to verify vulnerability reduction
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasecurity/trivy:latest image \
            --format json \
            --severity CRITICAL,HIGH,MEDIUM \
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:${{ env.PATCHED_TAG }} \
            > patched-scan-results.json
          
          # Compare vulnerability counts
          ORIGINAL_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' scan-results/${{ matrix.image }}/trivy-scan.json || echo "0")
          PATCHED_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' patched-scan-results.json || echo "0")
          
          echo "Original critical vulnerabilities: $ORIGINAL_CRITICAL"
          echo "Patched critical vulnerabilities: $PATCHED_CRITICAL"
          
          if [ "$PATCHED_CRITICAL" -lt "$ORIGINAL_CRITICAL" ]; then
            echo "✅ Patching reduced vulnerabilities from $ORIGINAL_CRITICAL to $PATCHED_CRITICAL"
            echo "PATCH_EFFECTIVE=true" >> $GITHUB_ENV
          else
            echo "❌ Patching did not reduce vulnerabilities"
            echo "PATCH_EFFECTIVE=false" >> $GITHUB_ENV
          fi

      - name: Push patched image
        if: env.PATCHED_IMAGE_AVAILABLE == 'true' && env.PATCH_EFFECTIVE == 'true'
        run: |
          # Push patched image
          docker push ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:${{ env.PATCHED_TAG }}
          
          # If auto-deploy is enabled, also tag as latest
          if [ "${{ inputs.auto_deploy }}" == "true" ]; then
            docker tag ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:${{ env.PATCHED_TAG }} \
              ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest
            docker push ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ matrix.image }}:latest
          fi

  # Create security report and pull request
  create-security-report:
    needs: [vulnerability-scan, automated-patching]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all scan results
        uses: actions/download-artifact@v4
        with:
          pattern: vulnerability-scan-*
          path: all-scan-results/

      - name: Generate security report
        run: |
          mkdir -p security-reports
          
          # Generate comprehensive security report
          cat > security-reports/vulnerability-report.md << 'EOF'
          # 🛡️ Vulnerability Management Report
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Patch Level:** ${{ inputs.patch_level || 'critical' }}
          **Auto Deploy:** ${{ inputs.auto_deploy || 'false' }}
          
          ## 📊 Vulnerability Summary
          
          | Image | Critical | High | Medium | Patch Applied | Status |
          |-------|----------|------|--------|---------------|--------|
          EOF
          
          # Process each image's results
          for image in powershell-tools security-lab dev-environment; do
            if [ -f "all-scan-results/vulnerability-scan-$image/summary.json" ]; then
              CRITICAL=$(jq -r '.vulnerabilities.critical' all-scan-results/vulnerability-scan-$image/summary.json)
              HIGH=$(jq -r '.vulnerabilities.high' all-scan-results/vulnerability-scan-$image/summary.json)
              MEDIUM=$(jq -r '.vulnerabilities.medium' all-scan-results/vulnerability-scan-$image/summary.json)
              PATCH_REQ=$(jq -r '.patch_required' all-scan-results/vulnerability-scan-$image/summary.json)
              
              STATUS="✅ Clean"
              if [ "$PATCH_REQ" == "true" ]; then
                STATUS="⚠️ Needs Patching"
              fi
              
              echo "| $image | $CRITICAL | $HIGH | $MEDIUM | $PATCH_REQ | $STATUS |" >> security-reports/vulnerability-report.md
            fi
          done
          
          cat >> security-reports/vulnerability-report.md << 'EOF'
          
          ## 🔧 Recommended Actions
          
          1. **Critical Vulnerabilities**: Update base images and apply security patches immediately
          2. **High Vulnerabilities**: Schedule patching within 7 days
          3. **Medium Vulnerabilities**: Include in next regular maintenance window
          
          ## 📈 Metrics
          
          - **Total Images Scanned**: 3
          - **Images Requiring Patches**: $(grep -c "true" all-scan-results/*/summary.json || echo "0")
          - **Automated Patches Applied**: $(ls patched-* 2>/dev/null | wc -l || echo "0")
          
          ## 🔍 Detailed Findings
          
          Detailed vulnerability reports are available in the GitHub Security tab.
          EOF

      - name: Create Pull Request for patched images
        if: inputs.auto_deploy != true
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🔒 Apply automated security patches"
          title: "🔒 Automated Security Patches - $(date +%Y-%m-%d)"
          body: |
            ## 🛡️ Automated Security Patching
            
            This PR contains automated security patches for container images with vulnerabilities.
            
            ### Changes
            - Applied automated vulnerability patches
            - Updated base images where necessary
            - Verified patch effectiveness through testing
            
            ### Security Impact
            - Reduced critical and high severity vulnerabilities
            - Improved overall security posture
            - Maintained functionality through automated testing
            
            ### Next Steps
            1. Review the security report in the artifacts
            2. Test the patched images in staging
            3. Merge to deploy to production
            
            **Auto-generated by vulnerability management workflow**
          branch: security-patches-$(date +%Y%m%d)
          delete-branch: true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/